{
  "createdAt": "2025-09-10T17:02:17.804Z",
  "updatedAt": "2025-09-27T13:44:09.290Z",
  "id": "gB8NWpoCuOW6kiCe",
  "name": "Lead Generation from Google Maps",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "id": "effb1f10-cbb0-4cb6-888d-a56684f9529d",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -2352,
        1792
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "3b827ff8-af58-45db-b439-38843ebc1644",
      "name": "Remove Duplicates",
      "type": "n8n-nodes-base.removeDuplicates",
      "position": [
        -704,
        1840
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "63e4424a-ea5f-466b-a7ec-d13886473a97",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -480,
        1840
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "amount": 1
      },
      "id": "89f5559d-86a0-4478-9405-e689a9eda218",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        -32,
        1584
      ],
      "webhookId": "19cc6ed4-4fe7-485b-b879-c679e4b3374d",
      "typeVersion": 1.1
    },
    {
      "parameters": {},
      "id": "4f20d4a4-3828-43d4-b98c-52acd959803a",
      "name": "Wait1",
      "type": "n8n-nodes-base.wait",
      "position": [
        -256,
        1392
      ],
      "webhookId": "0fe34756-6e43-4603-8891-5747a9a6500a",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json.data\nconst regex = /https?:\\/\\/[^\\/\\s\"'>]+/g\nconst websites = input.match(regex)\nreturn websites.map(website => ({json:{website}}))"
      },
      "id": "2796e21e-300c-4348-823f-3f6f753f6535",
      "name": "Extract URLs",
      "type": "n8n-nodes-base.code",
      "position": [
        -1152,
        1840
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "=https://www.google.com/maps/search/{{ $json['Keywords Search'] }}",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "b5089c24-c557-4804-8622-28f6f6364697",
      "name": "Scrape Google Maps",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1376,
        1840
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "bf0a5053-9660-457c-9581-964793bb6d7d",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.website }}",
              "rightValue": "schema"
            },
            {
              "id": "9110b9e0-12aa-45cc-bde0-9eda8c10970e",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.website }}",
              "rightValue": "google"
            },
            {
              "id": "fb9b6ed6-96a5-4560-ab10-b8a4b9a61a2b",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.website }}",
              "rightValue": "gg"
            },
            {
              "id": "10500c0b-cdbd-4816-aba3-df60d69845dc",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.website }}",
              "rightValue": "gstatic"
            }
          ]
        },
        "options": {}
      },
      "id": "5394e894-4526-46c0-b505-031e227140af",
      "name": "Filter Google URLs",
      "type": "n8n-nodes-base.filter",
      "position": [
        -928,
        1840
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://production-sfo.browserless.io/chromium/bql",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"mutation Screenshot($url: String!) { goto(url: $url, waitUntil: load) {status } screenshot(type: jpeg) {base64 }}\",\n  \"variables\": {\n    \"url\": \"{{ $json.website }}\"\n  }\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2272,
        736
      ],
      "id": "2d235e35-3db8-415c-b733-de1bf14460ae",
      "name": "scrape website",
      "credentials": {
        "httpQueryAuth": {
          "id": "bK2c5PcRSMMzLFaC",
          "name": "browserless token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1kGgxT5YwE7vE8yOHbpiJKzxvD0lGYS-Cq7g4mzeLwjY",
          "mode": "list",
          "cachedResultName": "ZTechAI",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1kGgxT5YwE7vE8yOHbpiJKzxvD0lGYS-Cq7g4mzeLwjY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1891079129,
          "mode": "list",
          "cachedResultName": "Keyword Search",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1kGgxT5YwE7vE8yOHbpiJKzxvD0lGYS-Cq7g4mzeLwjY/edit#gid=1891079129"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2048,
        1840
      ],
      "id": "040a5928-6172-40bc-9264-0c874d50b268",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "jwr2VJQX9ktvb4Sz",
          "name": "Zubair-1"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "91a987c9-1b29-455a-81c9-4c94d0cccdc8",
              "leftValue": "={{ $json['Keywords Search'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "4d3e2ad4-7520-4282-b6bb-06b3cbfe615e",
              "leftValue": "={{ $json.Status }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1824,
        1840
      ],
      "id": "57ca0062-e0cc-4ee9-87aa-e1f41992f1d9",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -1600,
        1840
      ],
      "id": "f5c18d17-ef28-46ac-8712-73f81326dc1b",
      "name": "Limit1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://production-sfo.browserless.io/chromium/bql",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"mutation Screenshot($url: String!) { goto(url: $url, waitUntil: load) {status } screenshot(type: jpeg) {base64 }}\",\n  \"variables\": {\n    \"url\": \"{{ $json.website }}\"\n  }\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2272,
        512
      ],
      "id": "a5e4bb48-ef81-495e-8208-18d6b2dfacce",
      "name": "scrape website1",
      "credentials": {
        "httpQueryAuth": {
          "id": "bK2c5PcRSMMzLFaC",
          "name": "browserless token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a website scraping and data extraction agent.\n\nInput: You will be given raw scraped HTML of a website.  \nTask: Extract all possible business details and return them in a clean, normalized JSON object.\n\n### Rules:\n1. Always output a single JSON object in the exact schema below. No explanations, no markdown, no text outside JSON.\n2. Normalize data into consistent formats, even if the source format is messy:\n   - Website: full URL including https://\n   - Email Address: must be valid email format. If obfuscated (e.g., \"info[at]example[dot]com\"), convert to \"info@example.com\".\n   - Phone Number: convert to international format if possible (+CountryCode-XXX-XXX-XXXX). If not possible, return the number as-is without losing digits and add country code if it is also missing.\n   - Business Location: standardize as \"Street, City, State, Country\". If incomplete, return whatever is available.\n   - Business Type: return the specific type (e.g., Dental Clinic, Consultant, Restaurant).\n   - Chatbot: return \"Yes\" or \"No\" only.\n   - Appointment Scheduling: return \"Yes\" or \"No\" only.\n   - Services: always return a string. if services are more than one then include all services and separate them by comma \",\".\n   - AI Audit: short summary of AI/automation solutions observed (chatbot, appointment booking, FAQ AI, etc.). If none found, return \"No AI tools detected\".\n\n3. If any field is missing, infer from context if possible. Otherwise, leave it as an empty string \"\" or empty array [].\n4. Never omit fields from the JSON. Always return the complete schema.\n5. If the data you receive is not valid or the website does not exits and website scraping node sent an error, then return empty spaces at all fields without giving error.\n\n### Required JSON Schema:\n{\n  \"Website\": \"string\",\n  \"Email Address\": \"string\",\n  \"Phone Number\": \"string\",\n  \"Business Location\": \"string\",\n  \"Business Type\": \"string\",\n  \"Chatbot\": \"Yes or No\",\n  \"Appointment Scheduling\": \"Yes or No\",\n  \"Services\": \"string\",\n  \"AI Audit\": \"string\"\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2272,
        1072
      ],
      "id": "092f5f50-a3be-4483-b862-0b7d505262f4",
      "name": "AI Agent",
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ $json.website }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -256,
        1584
      ],
      "id": "bd17e96b-e655-4cd6-9bdc-c07a3c59236f",
      "name": "HTTP Request",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Website\": \"https://citydentalclinic.com\",\n  \"Email Address\": \"info@citydentalclinic.com\",\n  \"Phone Number\": \"+1-202-555-0199\",\n  \"Business Location\": \"154 Main Street, Boulevard Road, Toronto, Canada\",\n  \"Business Type\": \"Dental Clinic\",\n  \"Chatbot\": \"No\",\n  \"Appointment Scheduling\": \"Yes\",\n  \"Services\": \"Teeth Whitening,Root Canal Treatment,Tooth Extraction\",\n  \"AI Audit\": \"Online appointment scheduler available. No chatbot detected. No AI-driven tools found.\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -2144,
        1296
      ],
      "id": "262e49a3-7b96-4ddb-a7e4-c3b0e8e6e6de",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": "x-ai/grok-4-fast:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -2272,
        1296
      ],
      "id": "31a32044-43fa-41b4-800a-220a8b89b39d",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "65mlukvVZpheBc3O",
          "name": "new openrouter key"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1kGgxT5YwE7vE8yOHbpiJKzxvD0lGYS-Cq7g4mzeLwjY",
          "mode": "list",
          "cachedResultName": "ZTechAI",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1kGgxT5YwE7vE8yOHbpiJKzxvD0lGYS-Cq7g4mzeLwjY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1891079129,
          "mode": "list",
          "cachedResultName": "Keyword Search",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1kGgxT5YwE7vE8yOHbpiJKzxvD0lGYS-Cq7g4mzeLwjY/edit#gid=1891079129"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Status": "Completed",
            "Keywords Search": "={{ $('Get row(s) in sheet').item.json['Keywords Search'] }}"
          },
          "matchingColumns": [
            "Keywords Search"
          ],
          "schema": [
            {
              "id": "Keywords Search",
              "displayName": "Keywords Search",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -32,
        1392
      ],
      "id": "1f1abb9b-ff95-4f0e-b56f-ad22f1cc125d",
      "name": "Update Keyword Search in Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "jwr2VJQX9ktvb4Sz",
          "name": "Zubair-1"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1kGgxT5YwE7vE8yOHbpiJKzxvD0lGYS-Cq7g4mzeLwjY",
          "mode": "list",
          "cachedResultName": "ZTechAI",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1kGgxT5YwE7vE8yOHbpiJKzxvD0lGYS-Cq7g4mzeLwjY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1876557965,
          "mode": "list",
          "cachedResultName": "Raw Leads",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1kGgxT5YwE7vE8yOHbpiJKzxvD0lGYS-Cq7g4mzeLwjY/edit#gid=1876557965"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Website": "={{ $json.output.Website }}",
            "Email": "={{ $json.output['Email Address'] }}",
            "Phone Number": "={{ $json.output['Phone Number'] }}",
            "location": "={{ $json.output['Business Location'] }}",
            "Business Type": "={{ $json.output['Business Type'] }}",
            "chatbot": "={{ $json.output.Chatbot }}",
            "Appointment setter": "={{ $json.output['Appointment Scheduling'] }}",
            "Keyword Searched": "={{ $('Get row(s) in sheet').item.json['Keywords Search'] }}",
            "AI Audit": "={{ $json.output['AI Audit'] }}",
            "Services": "={{ $json.output.Services }}"
          },
          "matchingColumns": [
            "Website"
          ],
          "schema": [
            {
              "id": "Website",
              "displayName": "Website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Phone Number",
              "displayName": "Phone Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Business Type",
              "displayName": "Business Type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "chatbot",
              "displayName": "chatbot",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Appointment setter",
              "displayName": "Appointment setter",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Services",
              "displayName": "Services",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "AI Audit",
              "displayName": "AI Audit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Keyword Searched",
              "displayName": "Keyword Searched",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": false
        }
      },
      "id": "c6fa4230-cd49-4bd3-b893-f4acc8378f12",
      "name": "Add data to Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        768,
        1712
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "jwr2VJQX9ktvb4Sz",
          "name": "Zubair-1"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a website scraping and data extraction agent.\n\nInput: You will be given raw scraped HTML of a website.  \nTask: Extract all possible business details and return them in a clean, normalized JSON object.\n\n### Rules:\n1. Always output a single JSON object in the exact schema below. No explanations, no markdown, no text outside JSON.\n2. Normalize data into consistent formats, even if the source format is messy:\n   - Website: full URL including https://\n   - Email Address: must be valid email format. If obfuscated (e.g., \"info[at]example[dot]com\"), convert to \"info@example.com\".\n   - Phone Number: convert to international format if possible (+CountryCode-XXX-XXX-XXXX). If not possible, return the number as-is without losing digits and add country code if it is also missing.\n   - Business Location: standardize as \"Street, City, State, Country\". If incomplete, return whatever is available.\n   - Business Type: return the specific type (e.g., Dental Clinic, Consultant, Restaurant).\n   - Chatbot: return \"Yes\" or \"No\" only.\n   - Appointment Scheduling: return \"Yes\" or \"No\" only.\n   - Services: always return a string. if services are more than one then include all services and separate them by comma \",\".\n   - AI Audit: short summary of AI/automation solutions observed (chatbot, appointment booking, FAQ AI, etc.). If none found, return \"No AI tools detected\".\n\n3. If any field is missing, infer from context if possible. Otherwise, leave it as an empty string \"\" or empty array [].\n4. Never omit fields from the JSON. Always return the complete schema.\n5. If the data you receive is not valid or the website does not exits and website scraping node sent an error, then return empty spaces at all fields without giving error.\n\n### Required JSON Schema:\n{\n  \"Website\": \"string\",\n  \"Email Address\": \"string\",\n  \"Phone Number\": \"string\",\n  \"Business Location\": \"string\",\n  \"Business Type\": \"string\",\n  \"Chatbot\": \"Yes or No\",\n  \"Appointment Scheduling\": \"Yes or No\",\n  \"Services\": \"string\",\n  \"AI Audit\": \"string\"\n}\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        192,
        1584
      ],
      "id": "c00ef91b-c2ff-4457-a400-b8a1903b2abb",
      "name": "Basic LLM Chain",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "x-ai/grok-4-fast:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        208,
        1808
      ],
      "id": "b2aad206-f25b-491c-a9f6-eae072f2a98e",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "65mlukvVZpheBc3O",
          "name": "new openrouter key"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Website\": \"https://citydentalclinic.com\",\n  \"Email Address\": \"info@citydentalclinic.com\",\n  \"Phone Number\": \"+1-202-555-0199\",\n  \"Business Location\": \"154 Main Street, Boulevard Road, Toronto, Canada\",\n  \"Business Type\": \"Dental Clinic\",\n  \"Chatbot\": \"No\",\n  \"Appointment Scheduling\": \"Yes\",\n  \"Services\": \"Teeth Whitening,Root Canal Treatment,Tooth Extraction\",\n  \"AI Audit\": \"Online appointment scheduler available. No chatbot detected. No AI-driven tools found.\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        336,
        1808
      ],
      "id": "d35296f8-9978-42f0-a5ce-e4edd7de103f",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0ffce8da-0ddc-4d96-9f42-1c85b96cbe61",
              "leftValue": "={{ $json.output.Website }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        544,
        1584
      ],
      "id": "8a8d5a0d-50ee-4f8b-801d-9dcbe3d9f735",
      "name": "If1"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 6
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2304,
        2064
      ],
      "id": "d2e6c112-9f3c-40d9-806e-5a13053bbf75",
      "name": "Schedule Trigger"
    }
  ],
  "connections": {
    "Wait": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Update Keyword Search in Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract URLs": {
      "main": [
        [
          {
            "node": "Filter Google URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Google URLs": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Google Maps": {
      "main": [
        [
          {
            "node": "Extract URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "scrape website": {
      "main": [
        []
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        [
          {
            "node": "Scrape Google Maps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "scrape website1": {
      "main": [
        []
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Add data to Sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Add data to Sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "UUKqPWIjdYo6Togj",
    "timeSavedPerExecution": 40
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "26ce4251-f865-4ab6-8c44-95b1dd7ac986",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-10T17:02:17.804Z",
      "updatedAt": "2025-09-10T17:02:17.804Z",
      "role": "workflow:owner",
      "workflowId": "gB8NWpoCuOW6kiCe",
      "projectId": "KyK2NGi92B9PeHQl"
    }
  ],
  "tags": [
    {
      "createdAt": "2025-09-10T17:04:58.587Z",
      "updatedAt": "2025-09-10T17:04:58.587Z",
      "id": "1lnZqEWBrKP3wUi2",
      "name": "Leads"
    }
  ]
}